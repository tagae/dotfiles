;; ===[ S Y S T E M ]===

(let ((tested-on "24.4"))
  (cond
   ((version< emacs-version tested-on)
    (error "Configuration tested on GNU Emacs %s; current version is %s"
           tested-on emacs-version))))

;; Don't be stingy on memory. See for instance https://github.com/lewang/flx
;; Do 1 garbage collection per 50MB of allocated data.
(setq gc-cons-threshold 50000000)

;; Load paths.
(add-to-list 'load-path (expand-file-name "site-lisp" user-emacs-directory))

;; Always load newest byte code.
;; [DISABLED] Seems to break things (e.g., loading of java files)
;(setq load-prefer-newer t)

(defconst emacs-state-dir (expand-file-name "state/" user-emacs-directory)
  "Stores state information generated by Emacs operation.")

(make-directory emacs-state-dir t)

(defconst emacs-tmp-dir
  (format "%s%s/%s/" temporary-file-directory "emacs" (user-login-name))
  "Stores temporary files.")

(make-directory emacs-tmp-dir t)

;; Load Emacs Lisp file manipulation utilities.
(require 'sg/elisp-files)

;; Use the package system.
;; (Comment out to disable the activation of installed packages.)
(require 'package)
(package-initialize)

;; Load customisations of Emacs functionality.
(sg:load-elisp-files "system-hacks/")


;; ===[ H O O K S ]===

;; Install hooks found in `hooks' directory.
;; Each filename in `hooks' is used as hook name.

(sg:with-elisp-files "hooks/" hook-filename
  (let ((hook-name (intern (file-name-base hook-filename))))
    (add-hook hook-name `(lambda () (load ,hook-filename)))))

;; Install file-loading hooks found in `after-load' directory.  Each
;; `after-load' file is named after its corresponding package.

(defvar after-loads '()
  "List of after-load files that have been loaded. This helps
  executing each after-load only once.")

(sg:with-elisp-files "after-load/" after-load-file
  (let ((package-name (intern (file-name-base after-load-file))))
    (eval-after-load package-name
      `(unless (memq ',package-name after-loads)
         (load-file ,after-load-file)
         (add-to-list 'after-loads ',package-name)))))


;; ===[ I 1 8 N ]===

(setq locale-coding-system 'utf-8)
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(set-selection-coding-system 'utf-8)
(set-default-coding-systems 'utf-8)
(set-clipboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)


;; ===[ A P P E A R A N C E ]===

;; Supress known information.
(setq inhibit-startup-screen t)

;; No visual distractions.
(blink-cursor-mode 0)

;; --- GUI

;; Remove useless elements.
(menu-bar-mode 0)
(tool-bar-mode 0)
(scroll-bar-mode 0)

;; --- Scrolling

;; Avoid scroll “jumps” (scroll one line at a time).
(setq scroll-conservatively 1)

;; Number of lines before scroll begins.
(setq scroll-margin 10)

;; Keep cursor fixed when paging up or down.
(setq scroll-preserve-screen-position 1)

;; --- Mode line

;; Show cursor coordinates.
(line-number-mode 1)
(column-number-mode 1)

;; Show buffer size.
(size-indication-mode 1)

;; --- Buffer content

;; Avoid visually truncating lines.
(set-default 'truncate-lines t)

;; Use visually concise symbols (for modes that support it).
(global-prettify-symbols-mode 1)

;; Show empty lines after buffer end.
(set-default 'indicate-empty-lines t)

;; --- Bell behaviour

;; Alternatives:
;;(setq visible-bell t)
;;(setq ring-bell-function 'sg:flash-mode-line)
(setq ring-bell-function 'ignore)

;; --- Visual aids

;; Show matching parentheses.
(show-paren-mode 1)

;; No limit for matching parenthesis.
(setq blink-matching-paren-distance nil)


;; ===[ W I N D O W S ]===

;; Undo/redo window configuration with C-c <left>/<right>.
;;(winner-mode 1)

;; Navigate windows with M-<arrows>.
(windmove-default-keybindings 'meta)
(setq windmove-wrap-around t)


;; ===[ E D I T I N G ]===

;; Lines should be 80 characters wide, not 70.
(set-default 'fill-column 80)

;; Avoid automatic breaking of lines.
;(auto-fill-mode 0)

;; Save other program's selection before killing text.
(setq save-interprogram-paste-before-kill t)

;; Enable change region case commands.
;; (off by default for the sake of novices)
(put 'upcase-region 'disabled nil)
(put 'downcase-region 'disabled nil)

;; Enable narrowing commands.
;; (off by default for the sake of novices)
(put 'narrow-to-region 'disabled nil)
(put 'narrow-to-page 'disabled nil)
(put 'narrow-to-defun 'disabled nil)

;; Enable erase-buffer command.
;; (off by default for the sake of novices)
;; See http://emacsredux.com/blog/2013/05/04/erase-buffer/
(put 'erase-buffer 'disabled nil)

;; Sentences do not need double spaces to end. Period.
;(set-default 'sentence-end-double-space nil)
;(set-default 'colon-double-space nil)

;; Have TAB work as autocomplete if line already indented.
(setq tab-always-indent 'complete)
(add-to-list 'completion-styles 'initials t)

;; Easily navigate sillyCasedWords.
(global-subword-mode 1)


;; ===[ W H I T E S P A C E ]===

;; Use spaces for indentation.
(setq-default indent-tabs-mode nil)

;; Maintain expected (historic) appearance of tabs.
(setq-default tab-width 8)

;; Ensure that files end with a newline.
(setq require-final-newline t)

;; Manage whitespace everywhere.
(global-whitespace-mode 1)


;; ===[ S E L E C T I O N ]===

;; No need to mark things using shift.
(setq shift-select-mode nil)

;; Replace selection with typed text.
(delete-selection-mode 1)


;; ===[ B U F F E R S ]===

;; Supprees default (help) message from *scratch*.
;; (setq initial-scratch-message nil)

;; Revert unmodified buffer when file changes.
(global-auto-revert-mode 1)
(setq global-auto-revert-non-file-buffers t ; works in particular for dired
      auto-revert-verbose nil) ; be quiet about auto reverting

;; Seems the most intuitive to me.
(setq uniquify-buffer-name-style 'forward)
;(setq uniquify-separator ":") ; possibility for 'post-forward

;; --- Minibuffer

(setq savehist-file (expand-file-name "savehist" emacs-state-dir))
(savehist-mode 1)


;; ===[ F I L E S ]===

(defconst emacs-backup-dir
  (expand-file-name "backups" emacs-tmp-dir)
  "Directory to store backup files.")

(make-directory emacs-backup-dir t)

;; Make backups files.
;; (http://www.emacswiki.org/emacs/ForceBackups)
(setq backup-directory-alist `((".*" . ,emacs-backup-dir))
      vc-make-backup-files t ; even when file is under version control
      version-control t ; use version numbers for backups
      kept-new-versions 10 ; number of newest versions to keep
      kept-old-versions 0 ; number of oldest versions to keep
      delete-old-versions t ; be silent about deleting excess backup versions
      backup-by-copying t) ; don't clobber symlinks

;; Store autosave files in tmp dir.
(setq auto-save-file-name-transforms `((".*" ,emacs-tmp-dir t))
      auto-save-list-file-prefix emacs-tmp-dir)

;; Move files to trash when deleting.
(setq delete-by-moving-to-trash t)

;; Warn when opening files bigger than 100MB.
(setq large-file-warning-threshold 100000000)

;; --- Missing default auto-modes

(add-to-list 'auto-mode-alist '("README\\(\\.md\\)?\\'" . text-mode))
(add-to-list 'auto-mode-alist '("AUTHORS\\'" . text-mode))


;; ===[ S E S S I O N S ]===

;; Save point position between sessions.
(require 'saveplace)
(setq-default save-place t)
(setq save-place-file (expand-file-name "saveplace" emacs-state-dir))


;; ===[ A C C E L E R A T O R S ]===

;; Make all "yes or no" prompts show "y or n" instead.
(defalias 'yes-or-no-p 'y-or-n-p)

;; Interactive do.
(ido-mode 1)


;; ===[ T O O L S ]===

;; --- ispell

(setq ispell-program-name "aspell"
      ispell-dictionary "british"
      ispell-extra-args '("--sug-mode=ultra" "--keyboard=dvorak"))

;; --- eshell

(setq eshell-history-file-name
      (expand-file-name "eshell-history" emacs-state-dir))

;; --- server

(require 'server) ; no autoloads provided
(unless (server-running-p)
  (server-start))


;; ===[ P L A T F O R M ]===

;; Load configuration based on current system type.
(let* ((base-name (symbol-name system-type))
       (system-type-config (concat "system-type/" base-name)))
  (load system-type-config 'optional))

;; Load configuration based on current window system.
(let* ((base-name (symbol-name window-system))
       (window-system-config (concat "window-system/" base-name)))
  (load window-system-config 'optional))


;; ===[ C U S T O M I Z A T I O N ]===

;; Load custom key assignments.
(load (expand-file-name "keys" user-emacs-directory) 'optional)

;; Don't let customisation code clutter this file.
(setq custom-file (expand-file-name "custom.el" user-emacs-directory))

;; Load user preferences if available.
(load custom-file 'optional)
